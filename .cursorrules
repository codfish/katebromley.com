# Cursor Rules for katebromley.com

## Semantic HTML and Accessibility

### CRITICAL: Navigation vs Actions
- NEVER use JavaScript click handlers to simulate link navigation
- ALWAYS use proper semantic HTML elements for their intended purpose
- Use ternary operators to render the appropriate element type:
  - Links (`<a>` or `<Link>`): For navigation between pages/sections
  - Buttons (`<button>`): For actions, form submissions, UI interactions

```jsx
// ✅ CORRECT: Semantic ternary pattern
return href ? (
  <Link href={href} className={className} {...props}>
    {children}
  </Link>
) : (
  <button type="button" className={className} onClick={handleAction} {...props}>
    {children}
  </button>
);

// ❌ WRONG: JS click handlers for navigation
return (
  <button onClick={() => router.push(href)} className={className}>
    {children}
  </button>
);
```

### Why This Matters
- **Accessibility**: Screen readers announce links and buttons differently
- **Keyboard Navigation**: Links respond to Enter, buttons to Space
- **Browser Features**: Right-click context menus, "Open in new tab", etc.
- **SEO**: Search engines can crawl `<a>` tags but not JS navigation
- **Performance**: Links work without JavaScript
- **User Expectations**: Users expect different behaviors from links vs buttons

## Next.js Guidelines

### Link Component Migration (v15+)
- Remove `legacyBehavior` prop from Next.js Link components
- Remove nested `<a>` elements inside Link components
- Move className and other props directly to the Link component
- Maintain ternary pattern for Button components that can be links

```jsx
// ✅ CORRECT: Next.js v15+ Link
<NextLink href={href} className={className} {...other}>
  {children}
</NextLink>

// ❌ WRONG: Legacy behavior
<NextLink href={href} legacyBehavior>
  <a className={className} {...other}>
    {children}
  </a>
</NextLink>
```

## Component Patterns

### Button Component
- Must render actual `<button>` element when no href provided
- Must render `<Link>` element when href is provided
- Never mix the two or use JS navigation for links

### Link Component
- Should be a thin wrapper around Next.js Link
- Should pass through all props to NextLink
- Should maintain active state detection if needed

## Code Quality
- Prefer editing existing files over creating new ones
- Use semantic, accessible HTML elements
- Follow React prop spreading patterns consistently
- Maintain TypeScript/PropTypes validation where established
